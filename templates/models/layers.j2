{% macro Linear(in_features, out_features, bias=True) %}
    nn.Linear({{ in_features }}, {{ out_features }}, bias={{ bias }})
{% endmacro %}

{% macro Bilinear(in1_features, in2_features, out_features, bias=True) %}
    nn.Bilinear({{ in1_features }}, {{ in2_features }}, {{ out_features }}, bias={{ bias }})
{% endmacro %}

{% macro Conv1d(
    in_channels, out_channels, kernel_size,
    stride=1, padding=0, dilation=1, groups=1,
    bias=True, padding_mode='zeros'
) %}
    nn.Conv1d(
        {{ in_channels }}, {{ out_channels }}, {{ kernel_size }},
        stride={{ stride }}, padding={{ padding }}, dilation={{ dilation }},
        groups={{ groups }}, bias={{ bias }}, padding_mode='{{ padding_mode }}'
    )
{% endmacro %}

{% macro Conv2d(
    in_channels, out_channels, kernel_size, stride,
    padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros'
) %}
    nn.Conv2d(
        {{ in_channels }}, {{ out_channels }}, {{ kernel_size }},
        stride={{ stride }}, padding={{ padding }}, dilation={{ dilation }},
        groups={{ groups }}, bias={{ bias }}, padding_mode='{{ padding_mode }}'
    )
{% endmacro %}

{% macro Conv3d(
    in_channels, out_channels, kernel_size,
    stride=1, padding=0, dilation=1, groups=1,
    bias=True, padding_mode='zeros'
) %}
    nn.Conv3d(
        {{ in_channels }}, {{ out_channels }}, {{ kernel_size }},
        stride={{ stride }}, padding={{ padding }}, dilation={{ dilation }},
        groups={{ groups }}, bias={{ bias }}, padding_mode='{{ padding_mode }}'
    )
{% endmacro %}

{% macro ConvTranspose1d(
    in_channels, out_channels, kernel_size,
    stride=1, padding=0, output_padding=0, bias=True
) %}
    nn.ConvTranspose1d(
        {{ in_channels }}, {{ out_channels }}, {{ kernel_size }},
        stride={{ stride }}, padding={{ padding }},
        output_padding={{ output_padding }}, bias={{ bias }}
    )
{% endmacro %}

{% macro ConvTranspose2d(
    in_channels, out_channels, kernel_size,
    stride=1, padding=0, output_padding=0, bias=True
) %}
    nn.ConvTranspose2d(
        {{ in_channels }}, {{ out_channels }}, {{ kernel_size }},
        stride={{ stride }}, padding={{ padding }},
        output_padding={{ output_padding }}, bias={{ bias }}
    )
{% endmacro %}

{% macro ConvTranspose3d(
    in_channels, out_channels, kernel_size,
    stride=1, padding=0, output_padding=0, bias=True
) %}
    nn.ConvTranspose3d(
        {{ in_channels }}, {{ out_channels }}, {{ kernel_size }},
        stride={{ stride }}, padding={{ padding }},
        output_padding={{ output_padding }}, bias={{ bias }}
    )
{% endmacro %}

{% macro MaxPool1d(
    kernel_size, stride=None, padding=0, dilation=1, ceil_mode=False
) %}
    nn.MaxPool1d(
        {{ kernel_size }}, stride={{ stride or kernel_size }},
        padding={{ padding }}, dilation={{ dilation }}, ceil_mode={{ ceil_mode }}
    )
{% endmacro %}

{% macro MaxPool2d(
    kernel_size, stride=None, padding=0, dilation=1, ceil_mode=False
) %}
    nn.MaxPool2d(
        {{ kernel_size }}, stride={{ stride or kernel_size }},
        padding={{ padding }}, dilation={{ dilation }}, ceil_mode={{ ceil_mode }}
    )
{% endmacro %}

{% macro MaxPool3d(
    kernel_size, stride=None, padding=0, dilation=1, ceil_mode=False
) %}
    nn.MaxPool3d(
        {{ kernel_size }}, stride={{ stride or kernel_size }},
        padding={{ padding }}, dilation={{ dilation }}, ceil_mode={{ ceil_mode }}
    )
{% endmacro %}

{% macro AvgPool1d(
    kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True
) %}
    nn.AvgPool1d(
        {{ kernel_size }}, stride={{ stride or kernel_size }},
        padding={{ padding }}, ceil_mode={{ ceil_mode }},
        count_include_pad={{ count_include_pad }}
    )
{% endmacro %}

{% macro AvgPool2d(
    kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True
) %}
    nn.AvgPool2d(
        {{ kernel_size }}, stride={{ stride or kernel_size }},
        padding={{ padding }}, ceil_mode={{ ceil_mode }},
        count_include_pad={{ count_include_pad }}
    )
{% endmacro %}

{% macro AvgPool3d(
    kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True
) %}
    nn.AvgPool3d(
        {{ kernel_size }}, stride={{ stride or kernel_size }},
        padding={{ padding }}, ceil_mode={{ ceil_mode }},
        count_include_pad={{ count_include_pad }}
    )
{% endmacro %}

{% macro BatchNorm1d(
    num_features, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True
) %}
    nn.BatchNorm1d(
        {{ num_features }}, eps={{ eps }}, momentum={{ momentum }},
        affine={{ affine }}, track_running_stats={{ track_running_stats }}
    )
{% endmacro %}

{% macro BatchNorm2d(
    num_features, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True
) %}
    nn.BatchNorm2d(
        {{ num_features }}, eps={{ eps }}, momentum={{ momentum }},
        affine={{ affine }}, track_running_stats={{ track_running_stats }}
    )
{% endmacro %}

{% macro BatchNorm3d(
    num_features, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True
) %}
    nn.BatchNorm3d(
        {{ num_features }}, eps={{ eps }}, momentum={{ momentum }},
        affine={{ affine }}, track_running_stats={{ track_running_stats }}
    )
{% endmacro %}

{% macro LayerNorm(
    normalized_shape, eps=1e-5, elementwise_affine=True
) %}
    nn.LayerNorm(
        {{ normalized_shape }}, eps={{ eps }}, elementwise_affine={{ elementwise_affine }}
    )
{% endmacro %}

{% macro Transformer(
    d_model=512, nhead=8, num_encoder_layers=6, num_decoder_layers=6,
    dim_feedforward=2048, dropout=0.1, activation='relu'
) %}
    nn.Transformer(
        d_model={{ d_model }}, nhead={{ nhead }},
        num_encoder_layers={{ num_encoder_layers }},
        num_decoder_layers={{ num_decoder_layers }},
        dim_feedforward={{ dim_feedforward }}, dropout={{ dropout }},
        activation='{{ activation }}'
    )
{% endmacro %}

{% macro MultiheadAttention(
    embed_dim, num_heads, dropout=0.0, bias=True, add_bias_kv=False
) %}
    nn.MultiheadAttention(
        {{ embed_dim }}, {{ num_heads }},
        dropout={{ dropout }}, bias={{ bias }}, add_bias_kv={{ add_bias_kv }}
    )
{% endmacro %}

{% macro Dropout(p=0.5, inplace=False) %}
    nn.Dropout(p={{ p }}, inplace={{ inplace }})
{% endmacro %}

{% macro Dropout1d(p=0.5, inplace=False) %}
    nn.Dropout1d(p={{ p }}, inplace={{ inplace }})
{% endmacro %}

{% macro Dropout2d(p=0.5, inplace=False) %}
    nn.Dropout2d(p={{ p }}, inplace={{ inplace }})
{% endmacro %}

{% macro Dropout3d(p=0.5, inplace=False) %}
    nn.Dropout3d(p={{ p }}, inplace={{ inplace }})
{% endmacro %}

{% macro Embedding(
    num_embeddings, embedding_dim, padding_idx=None, max_norm=None, sparse=False
) %}
    nn.Embedding(
        {{ num_embeddings }}, {{ embedding_dim }},
        padding_idx={{ padding_idx }}, max_norm={{ max_norm }}, sparse={{ sparse }}
    )
{% endmacro %}

{% macro PixelShuffle(upscale_factor) %}
    nn.PixelShuffle(upscale_factor={{ upscale_factor }})
{% endmacro %}

{% macro Upsample(size, scale_factor=None, mode='nearest') %}
    nn.Upsample(size={{ size }}, scale_factor={{ scale_factor }}, mode='{{ mode }}')
{% endmacro %}

{% macro LSTM(
    input_size, hidden_size, num_layers=1, batch_first=False, bidirectional=False
) %}
    nn.LSTM(
        input_size={{ input_size }}, hidden_size={{ hidden_size }},
        num_layers={{ num_layers }}, batch_first={{ batch_first }},
        bidirectional={{ bidirectional }}
    )
{% endmacro %}

{% macro Flatten(start_dim=1, end_dim=-1) %}
    nn.Flatten(start_dim={{ start_dim }}, end_dim={{ end_dim }})
{% endmacro %}

{% macro Unfold(kernel_size, stride=1, padding=0, dilation=1) %}
    nn.Unfold(
        kernel_size={{ kernel_size }}, stride={{ stride }},
        padding={{ padding }}, dilation={{ dilation }}
    )
{% endmacro %}